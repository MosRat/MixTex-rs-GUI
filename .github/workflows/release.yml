name: 'publish'

on:
  push:
    tags:
      - 'v*'


jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
            libs: 'arm64-mac'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
            libs: 'x86-64-mac'
          - platform: 'ubuntu-22.04' # for Tauri v1 you could replace this with ubuntu-20.04.
            args: ''
            libs: 'x86-64-linux'
          - platform: 'windows-latest'
            args: ''
            libs: 'x86-64-windows-msvc'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Download and extract lib dependencies (Windows)
        if: matrix.platform == 'windows-latest'
        shell: pwsh
        run: |
          New-Item -Path "lib" -ItemType Directory -Force
          Invoke-WebRequest -Uri "https://github.com/MosRat/MixTex-rs-GUI/releases/download/deps/${{ matrix.libs }}.zip" -OutFile "${{ matrix.libs }}.zip"
          Expand-Archive -Path "${{ matrix.libs }}.zip" -DestinationPath "lib" -Force
          Remove-Item "${{ matrix.libs }}.zip"

      - name: Download and extract lib dependencies (macOS/Linux)
        if: matrix.platform != 'windows-latest'
        shell: bash
        run: |
          mkdir -p lib
          curl -L "https://github.com/MosRat/MixTex-rs-GUI/releases/download/deps/${{ matrix.libs }}.zip" -o ${{ matrix.libs }}.zip
          unzip -q ${{ matrix.libs }}.zip -d lib
          rm ${{ matrix.libs }}.zip

      - name: Download and extract models (Windows)
        if: matrix.platform == 'windows-latest'
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://github.com/MosRat/MixTex-rs-GUI/releases/download/deps/models.zip" -OutFile "models.zip"
          Expand-Archive -Path "models.zip" -DestinationPath "." -Force
          Remove-Item "models.zip"

      - name: Download and extract models (macOS/Linux)
        if: matrix.platform != 'windows-latest'
        shell: bash
        run: |
          curl -L "https://github.com/MosRat/MixTex-rs-GUI/releases/download/deps/models.zip" -o models.zip
          unzip -q models.zip 
          rm models.zip

      - name: List files (for verification)
        shell: bash
        run: |
          echo "Library files:"
          ls -R lib
          echo "Model files:"
          ls -R models

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-20.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev  libappindicator3-dev librsvg2-dev patchelf
        # webkitgtk 4.0 is for Tauri v1 - webkitgtk 4.1 is for Tauri v2.
        # You can remove the one that doesn't apply to your app to speed up the workflow a bit.
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: install frontend dependencies
        run: pnpm install  --no-frozen-lockfile # change this to npm, pnpm or bun depending on which one you use.

      - name: Generate release tag (Unix)
        if: runner.os != 'Windows'
        id: generate_tag_unix
        run: echo "TAG=${GITHUB_RUN_NUMBER}-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Generate release tag (Windows)
        if: runner.os == 'Windows'
        id: generate_tag_windows
        run: |
          $tag = "${env:GITHUB_RUN_NUMBER}-$($env:GITHUB_SHA.Substring(0,7))"
          echo "TAG=$tag" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ORT_LIB_LOCATION: ${{ github.workspace }}/lib/${{ matrix.libs }}

        with:
          tagName: app-v__VERSION__-${{ steps.generate_tag_windows.outputs.TAG }}${{ steps.generate_tag_unix.outputs.TAG }} # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: 'App v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}